@page "/"
@using BadgeFed.Models
@inject HttpClient Http
@inject LocalDbService LocalDbService
@inject IHttpContextAccessor HttpContextAccessor
        
<div class="container">
    <div class="columns">
        <div class="column is-two-thirds">
                <h2 class="title is-4">What is BadgeFed?</h2>
                <p class="is-size-5">A Badge System built on <strong>ActivityPub</strong>, empowering communities to
                    issue and verify badges in a federated, open way.</p>

                    <h3 class="title is-5">Key Features</h3>
                    <div class="content">
                        <ul>
                            <li>🔓 Fully Open-Source</li>
                            <li>🌍 Federated via ActivityPub</li>
                            <li>⚡ Built with .NET for performance & scalability</li>
                            <li>🏅 Issue, Earn, and Verify badges seamlessly</li>
                        </ul>
                    </div>

                    <a href="https://github.com/yourusername/badgefed" class="button is-primary is-medium">
                        <span class="icon"><i class="fab fa-github"></i></span>
                        <span>Explore on GitHub</span>
                    </a>
                
        </div>

        <div class="column">
            <div class="card">
                <div class="card-header">
                    <p class="card-header-title">Instance Information</p>
                </div>
                <div class="card-content">
                    <div class="content">
                        <p><strong>Name:</strong> @(InstanceInfo?.Name ?? "Loading...")</p>
                        <p><strong>Description:</strong> @(InstanceInfo?.Description ?? "Loading...")</p>
                        <p><strong>Version:</strong> @(InstanceInfo?.Version ?? "Loading...")</p>
                        <p><strong>Users:</strong> @(InstanceInfo?.UserCount ?? 0)</p>
                        <p><strong>Badges:</strong> @(InstanceInfo?.BadgeCount ?? 0)</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <section class="section" style="display: none;">
        <h2 class="title is-4">Recent Badges</h2>

        @if (RecentBadges == null)
        {
            <div class="has-text-centered">
                <div class="loader is-loading"></div>
                <p>Loading latest badges...</p>
            </div>
        }
        else if (!RecentBadges.Any())
        {
            <div class="notification is-info">
                No badges have been issued recently.
            </div>
        }
        else
        {
            <div class="columns is-multiline">
                @foreach (var badge in RecentBadges)
                {
                    <div class="column is-3">
                        <div class="card">
                            <div class="card-image">
                                <figure class="image is-square">
                                    <img src="@badge.ImageUrl" alt="@badge.ImageAltText">
                                </figure>
                            </div>
                            <div class="card-content">
                                <p class="title is-5">@badge.Name</p>
                                <p class="subtitle is-6">Issued to: @badge.RecipientName</p>
                                <time datetime="@badge.IssuedAt.ToString("o")">@badge.IssuedAt.ToShortDateString()</time>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </section>

    <section class="section">
        <h2 class="title is-4">Actors in this Instance</h2>
        <p class="subtitle is-6">Follow these actors to interact with them from your ActivityPub server</p>

        @if (Actors == null)
        {
            <div class="has-text-centered">
                <div class="loader is-loading"></div>
                <p>Loading actors...</p>
            </div>
        }
        else if (!Actors.Any())
        {
            <div class="notification is-info">
                No actors found in this instance.
            </div>
        }
        else
        {
            <div class="columns is-multiline">
                @foreach (var actor in Actors)
                {
                    <div class="column is-4">
                        <div class="box">
                            <article class="media">
                                <div class="media-left">
                                    <figure class="image is-64x64">
                                        <img class="is-rounded" src="" alt="@actor.FullName">
                                    </figure>
                                </div>
                                <div class="media-content">
                                    <div class="content">
                                        <p>
                                            <strong>@actor.FullName</strong>
                                            <small>@actor.Username</small>
                                            <br>
                                            @actor.Summary
                                        </p>
                                    </div>
                                    <div class="field is-grouped">
                                        <p class="control">
                                            <a class="button is-small is-primary" href="">
                                                <span class="icon"><i class="fas fa-user"></i></span>
                                                <span>Profile</span>
                                            </a>
                                        </p>
                                        <p class="control">
                                            <a class="button is-small is-info" href="">
                                                <span class="icon"><i class="fas fa-plus"></i></span>
                                                <span>Follow</span>
                                            </a>
                                        </p>
                                    </div>
                                </div>
                            </article>
                        </div>
                    </div>
                }
            </div>
        }
    </section>
</div>

@code {
    private InstanceInfoDefinition InstanceInfo { get; set; }
    private List<Badge> RecentBadges { get; set; }
    private List<Actor> Actors { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            InstanceInfo = new InstanceInfoDefinition
            {
                Name = "VocalCat Badges",
                Description = "A proof-of-concept for BadgeFed",
                Version = "0.0.1-alpha",
                UserCount = 1,
                BadgeCount = 1
            };
            Actors = LocalDbService.GetActors();
            // In a real app, replace these with actual API calls
            // InstanceInfo = await Http.GetFromJsonAsync<InstanceInfo>("api/instance/info");
            // RecentBadges = await Http.GetFromJsonAsync<List<Badge>>("api/badges/recent");
            // Actors = await Http.GetFromJsonAsync<List<Actor>>("api/actors");

            // add a header for strong cache of like 24hrs
             HttpContextAccessor.HttpContext.Response.Headers.Add("Cache-Control", "public, max-age=86400");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    // Sample model classes - move these to proper model files
    public class InstanceInfoDefinition
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public string Version { get; set; }
        public int UserCount { get; set; }
        public int BadgeCount { get; set; }
    }

    public class Badge
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string ImageUrl { get; set; }
        public string ImageAltText { get; set; }
        public string RecipientName { get; set; }
        public DateTime IssuedAt { get; set; }
    }    
}
